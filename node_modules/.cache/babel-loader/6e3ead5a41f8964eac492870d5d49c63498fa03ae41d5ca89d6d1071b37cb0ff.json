{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lasoa\\\\CascadeProjects\\\\ai-coaching-platform\\\\src\\\\contexts\\\\NotificationContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { Snackbar, Alert } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationContext = /*#__PURE__*/createContext(undefined);\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s();\n  const [notifications, setNotifications] = useState([]);\n  const [currentNotification, setCurrentNotification] = useState(null);\n  const showNotification = (type, message) => {\n    const newNotification = {\n      id: Date.now().toString(),\n      type,\n      message,\n      timestamp: new Date()\n    };\n    setNotifications(prev => [...prev, newNotification]);\n    setCurrentNotification(newNotification);\n  };\n  const clearNotification = id => {\n    setNotifications(prev => prev.filter(notification => notification.id !== id));\n    if ((currentNotification === null || currentNotification === void 0 ? void 0 : currentNotification.id) === id) {\n      setCurrentNotification(null);\n    }\n  };\n  const requestPushPermission = async () => {\n    try {\n      if ('Notification' in window) {\n        const permission = await Notification.requestPermission();\n        if (permission === 'granted') {\n          showNotification('success', 'Push notifications enabled');\n        } else {\n          showNotification('warning', 'Push notifications not enabled');\n        }\n      }\n    } catch (error) {\n      console.error('Error requesting notification permission:', error);\n      showNotification('error', 'Failed to enable push notifications');\n    }\n  };\n  const handleClose = id => {\n    clearNotification(id);\n  };\n  const value = {\n    notifications,\n    showNotification,\n    clearNotification,\n    requestPushPermission\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: value,\n    children: [children, currentNotification && /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: true,\n      autoHideDuration: 6000,\n      onClose: () => handleClose(currentNotification.id),\n      anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'right'\n      },\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: () => handleClose(currentNotification.id),\n        severity: currentNotification.type,\n        variant: \"filled\",\n        children: currentNotification.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(NotificationProvider, \"MEsDsm2QRdANQOpIKswVyDcfqTQ=\");\n_c = NotificationProvider;\nexport const useNotifications = () => {\n  _s2();\n  const context = useContext(NotificationContext);\n  if (context === undefined) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n};\n_s2(useNotifications, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","Snackbar","Alert","jsxDEV","_jsxDEV","NotificationContext","undefined","NotificationProvider","children","_s","notifications","setNotifications","currentNotification","setCurrentNotification","showNotification","type","message","newNotification","id","Date","now","toString","timestamp","prev","clearNotification","filter","notification","requestPushPermission","window","permission","Notification","requestPermission","error","console","handleClose","value","Provider","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","severity","variant","fileName","_jsxFileName","lineNumber","columnNumber","_c","useNotifications","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/lasoa/CascadeProjects/ai-coaching-platform/src/contexts/NotificationContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\nimport { Snackbar, Alert } from '@mui/material';\n\ninterface Notification {\n  id: string;\n  type: 'success' | 'error' | 'warning' | 'info';\n  message: string;\n  timestamp: Date;\n}\n\ninterface NotificationContextType {\n  notifications: Notification[];\n  showNotification: (type: Notification['type'], message: string) => void;\n  clearNotification: (id: string) => void;\n  requestPushPermission: () => Promise<void>;\n}\n\nconst NotificationContext = createContext<NotificationContextType | undefined>(undefined);\n\nexport const NotificationProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n  const [currentNotification, setCurrentNotification] = useState<Notification | null>(null);\n\n  const showNotification = (type: Notification['type'], message: string) => {\n    const newNotification: Notification = {\n      id: Date.now().toString(),\n      type,\n      message,\n      timestamp: new Date(),\n    };\n\n    setNotifications((prev) => [...prev, newNotification]);\n    setCurrentNotification(newNotification);\n  };\n\n  const clearNotification = (id: string) => {\n    setNotifications((prev) => prev.filter((notification) => notification.id !== id));\n    if (currentNotification?.id === id) {\n      setCurrentNotification(null);\n    }\n  };\n\n  const requestPushPermission = async () => {\n    try {\n      if ('Notification' in window) {\n        const permission = await Notification.requestPermission();\n        if (permission === 'granted') {\n          showNotification('success', 'Push notifications enabled');\n        } else {\n          showNotification('warning', 'Push notifications not enabled');\n        }\n      }\n    } catch (error) {\n      console.error('Error requesting notification permission:', error);\n      showNotification('error', 'Failed to enable push notifications');\n    }\n  };\n\n  const handleClose = (id: string) => {\n    clearNotification(id);\n  };\n\n  const value = {\n    notifications,\n    showNotification,\n    clearNotification,\n    requestPushPermission,\n  };\n\n  return (\n    <NotificationContext.Provider value={value}>\n      {children}\n      {currentNotification && (\n        <Snackbar\n          open={true}\n          autoHideDuration={6000}\n          onClose={() => handleClose(currentNotification.id)}\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n        >\n          <Alert\n            onClose={() => handleClose(currentNotification.id)}\n            severity={currentNotification.type}\n            variant=\"filled\"\n          >\n            {currentNotification.message}\n          </Alert>\n        </Snackbar>\n      )}\n    </NotificationContext.Provider>\n  );\n};\n\nexport const useNotifications = () => {\n  const context = useContext(NotificationContext);\n  if (context === undefined) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAClE,SAASC,QAAQ,EAAEC,KAAK,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAgBhD,MAAMC,mBAAmB,gBAAGP,aAAa,CAAsCQ,SAAS,CAAC;AAEzF,OAAO,MAAMC,oBAA6D,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7F,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAiB,EAAE,CAAC;EACtE,MAAM,CAACY,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGb,QAAQ,CAAsB,IAAI,CAAC;EAEzF,MAAMc,gBAAgB,GAAGA,CAACC,IAA0B,EAAEC,OAAe,KAAK;IACxE,MAAMC,eAA6B,GAAG;MACpCC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;MACzBN,IAAI;MACJC,OAAO;MACPM,SAAS,EAAE,IAAIH,IAAI,CAAC;IACtB,CAAC;IAEDR,gBAAgB,CAAEY,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAEN,eAAe,CAAC,CAAC;IACtDJ,sBAAsB,CAACI,eAAe,CAAC;EACzC,CAAC;EAED,MAAMO,iBAAiB,GAAIN,EAAU,IAAK;IACxCP,gBAAgB,CAAEY,IAAI,IAAKA,IAAI,CAACE,MAAM,CAAEC,YAAY,IAAKA,YAAY,CAACR,EAAE,KAAKA,EAAE,CAAC,CAAC;IACjF,IAAI,CAAAN,mBAAmB,aAAnBA,mBAAmB,uBAAnBA,mBAAmB,CAAEM,EAAE,MAAKA,EAAE,EAAE;MAClCL,sBAAsB,CAAC,IAAI,CAAC;IAC9B;EACF,CAAC;EAED,MAAMc,qBAAqB,GAAG,MAAAA,CAAA,KAAY;IACxC,IAAI;MACF,IAAI,cAAc,IAAIC,MAAM,EAAE;QAC5B,MAAMC,UAAU,GAAG,MAAMC,YAAY,CAACC,iBAAiB,CAAC,CAAC;QACzD,IAAIF,UAAU,KAAK,SAAS,EAAE;UAC5Bf,gBAAgB,CAAC,SAAS,EAAE,4BAA4B,CAAC;QAC3D,CAAC,MAAM;UACLA,gBAAgB,CAAC,SAAS,EAAE,gCAAgC,CAAC;QAC/D;MACF;IACF,CAAC,CAAC,OAAOkB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;MACjElB,gBAAgB,CAAC,OAAO,EAAE,qCAAqC,CAAC;IAClE;EACF,CAAC;EAED,MAAMoB,WAAW,GAAIhB,EAAU,IAAK;IAClCM,iBAAiB,CAACN,EAAE,CAAC;EACvB,CAAC;EAED,MAAMiB,KAAK,GAAG;IACZzB,aAAa;IACbI,gBAAgB;IAChBU,iBAAiB;IACjBG;EACF,CAAC;EAED,oBACEvB,OAAA,CAACC,mBAAmB,CAAC+B,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAA3B,QAAA,GACxCA,QAAQ,EACRI,mBAAmB,iBAClBR,OAAA,CAACH,QAAQ;MACPoC,IAAI,EAAE,IAAK;MACXC,gBAAgB,EAAE,IAAK;MACvBC,OAAO,EAAEA,CAAA,KAAML,WAAW,CAACtB,mBAAmB,CAACM,EAAE,CAAE;MACnDsB,YAAY,EAAE;QAAEC,QAAQ,EAAE,QAAQ;QAAEC,UAAU,EAAE;MAAQ,CAAE;MAAAlC,QAAA,eAE1DJ,OAAA,CAACF,KAAK;QACJqC,OAAO,EAAEA,CAAA,KAAML,WAAW,CAACtB,mBAAmB,CAACM,EAAE,CAAE;QACnDyB,QAAQ,EAAE/B,mBAAmB,CAACG,IAAK;QACnC6B,OAAO,EAAC,QAAQ;QAAApC,QAAA,EAEfI,mBAAmB,CAACI;MAAO;QAAA6B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CACX;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC2B,CAAC;AAEnC,CAAC;AAACvC,EAAA,CAvEWF,oBAA6D;AAAA0C,EAAA,GAA7D1C,oBAA6D;AAyE1E,OAAO,MAAM2C,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACpC,MAAMC,OAAO,GAAGrD,UAAU,CAACM,mBAAmB,CAAC;EAC/C,IAAI+C,OAAO,KAAK9C,SAAS,EAAE;IACzB,MAAM,IAAI+C,KAAK,CAAC,6DAA6D,CAAC;EAChF;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,gBAAgB;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}